{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/utils/helpers.js"],"names":["data","useState","filteredData","query","state","setState","allFeaturedImages","allFile","edges","allPosts","allMarkdownRemark","featuredImageMap","Utils","getImageMap","filteredPosts","title","className","type","placeholder","onChange","e","target","value","filter","post","node","frontmatter","description","tags","stdQuery","toLowerCase","excerpt","includes","join","fluid","map","key","id","to","fields","slug","featuredImage","startDate","start","endDate","end","season","year","images","regex","hasMultipleImages","limit","reduce","image","relativePath","match","hasOwnProperty","length","push","childImageSharp","arr","getCaptionMap","captions","caption","fileAbsolutePath"],"mappings":"8FAAA,4FAMe,sBAAe,IAAZA,EAAW,EAAXA,KAChB,EAA0BC,mBAAS,CACjCC,aAAc,GACdC,MAAO,KAFFC,EAAP,KAAcC,EAAd,KAKMC,EAAoBN,EAAKO,QAAQC,OAAS,GAC1CC,EAAWT,EAAKU,kBAAkBF,OAAS,GAE3CG,EAAmBC,IAAMC,YAAYP,EAD7B,sBAyBNJ,EAAwBE,EAAxBF,aACFY,EAA0B,KADAV,EAAVD,MACeD,EAAeO,EAEpD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKM,MAAM,aACX,kBAAC,IAAD,CAAWA,MAAM,aACjB,kBAAC,IAAD,CAAWC,UAAU,yBACnB,kBAAC,IAAD,CAAMA,UAAU,eACd,kBAAC,IAAD,CACEA,UAAU,SACVC,KAAK,OACLC,YAAY,SACZC,SAnCW,SAAAC,GACnB,IAAMjB,EAAQiB,EAAEC,OAAOC,MAEjBpB,EAAeO,EAASc,QAAO,SAAAC,GAEnC,MAAqCA,EAAKC,KAAKC,YAAvCC,EAAR,EAAQA,YAAaZ,EAArB,EAAqBA,MAAOa,EAA5B,EAA4BA,KAEtBC,EAAW1B,EAAM2B,cACvB,OACEN,EAAKC,KAAKM,QAAQD,cAAcE,SAASH,IACxCF,GAAeA,EAAYG,cAAcE,SAASH,IACnDd,EAAMe,cAAcE,SAASH,IAC5BD,GAAQA,EAAKK,KAAK,IAAIH,cAAcE,SAASH,MAIlDxB,EAAS,CACPF,QACAD,sBAqBA,kBAAC,IAAD,CACEgC,OAAK,EACLlB,UAAU,gEAETF,EAAcqB,KAAI,gBAAGV,EAAH,EAAGA,KAAH,OACjB,yBAAKW,IAAKX,EAAKY,GAAIrB,UAAU,OAC3B,kBAAC,IAAD,CACEsB,GAAIb,EAAKc,OAAOC,KAChBC,cAAe9B,EAAiBc,EAAKc,OAAOC,MAC5CzB,MAAOU,EAAKC,YAAYX,MACxB2B,UAAWjB,EAAKC,YAAYiB,MAC5BC,QAASnB,EAAKC,YAAYmB,IAC1BC,OAAQrB,EAAKC,YAAYoB,OACzBC,KAAMtB,EAAKC,YAAYqB,KACvBnB,KAAMH,EAAKC,YAAYE,KACvBG,QAASN,EAAKM,QACdJ,YAAaF,EAAKC,YAAYC,sB,0KCxE7B,G,UAAA,CACbd,YAAa,SAACmC,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAACjB,EAAKkB,GACzB,IAAMb,EAAOa,EAAM5B,KAAK6B,aAAaC,MAAMN,GAAO,GAClD,GAAIC,EACF,GAAIf,EAAIqB,eAAehB,GACjBL,EAAIK,GAAMiB,QAAUN,GACtBhB,EAAIK,GAAMkB,KAAKL,EAAM5B,KAAKkC,gBAAgBzB,WACvC,CACL,IAAM0B,EAAM,GACZA,EAAIF,KAAKL,EAAM5B,KAAKkC,gBAAgBzB,OACpCC,EAAIK,GAAQoB,OAGdzB,EAAIK,GAAQa,EAAM5B,KAAKkC,gBAAgBzB,MAEzC,OAAOC,IACN,KAEN0B,cAAe,SAACC,EAAUb,EAAOC,EAA2BC,GACzD,YADuE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GAC1DW,EAASV,QAAO,SAACjB,EAAK4B,GAG3B,OADA5B,EADa4B,EAAQtC,KAAKuC,iBAAiBT,MAAMN,GAAO,IAC5Cc,EAAQtC,KAAKC,YAAYqC,QAC9B5B,IACN","file":"component---src-pages-projects-js-3532c345fdc58fd7c346.js","sourcesContent":["import React, { useState } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { PageLayout, PageTitle, ProjectLink } from \"../components\"\nimport { SEO, Utils } from \"../utils\"\nimport { Container, Form, FormControl } from \"react-bootstrap\"\n\nexport default ({ data }) => {\n  const [state, setState] = useState({\n    filteredData: [],\n    query: \"\",\n  })\n\n  const allFeaturedImages = data.allFile.edges || []\n  const allPosts = data.allMarkdownRemark.edges || []\n  const regex = /\\/[projects].*\\/|$/\n  const featuredImageMap = Utils.getImageMap(allFeaturedImages, regex)\n\n  const handleChange = e => {\n    const query = e.target.value\n\n    const filteredData = allPosts.filter(post => {\n      // query will run on the following fields\n      const { description, title, tags } = post.node.frontmatter\n      // standardize query\n      const stdQuery = query.toLowerCase()\n      return (\n        post.node.excerpt.toLowerCase().includes(stdQuery) ||\n        (description && description.toLowerCase().includes(stdQuery)) ||\n        title.toLowerCase().includes(stdQuery) ||\n        (tags && tags.join(\"\").toLowerCase().includes(stdQuery))\n      )\n    })\n\n    setState({\n      query,\n      filteredData,\n    })\n  }\n\n  const { filteredData, query } = state\n  const filteredPosts = query !== \"\" ? filteredData : allPosts\n\n  return (\n    <PageLayout>\n      <SEO title=\"Projects\" />\n      <PageTitle title=\"Projects\" />\n      <Container className=\"px-5 mb-5 text-center\">\n        <Form className=\"blog-filter\">\n          <FormControl\n            className=\"search\"\n            type=\"text\"\n            placeholder=\"search\"\n            onChange={handleChange}\n          />\n        </Form>\n      </Container>\n      <Container\n        fluid\n        className=\"p-3 w-auto text-left d-flex flex-wrap justify-content-center\"\n      >\n        {filteredPosts.map(({ node }) => (\n          <div key={node.id} className=\"p-3\">\n            <ProjectLink\n              to={node.fields.slug}\n              featuredImage={featuredImageMap[node.fields.slug]}\n              title={node.frontmatter.title}\n              startDate={node.frontmatter.start}\n              endDate={node.frontmatter.end}\n              season={node.frontmatter.season}\n              year={node.frontmatter.year}\n              tags={node.frontmatter.tags}\n              excerpt={node.excerpt}\n              description={node.frontmatter.description}\n            />\n          </div>\n        ))}\n      </Container>\n    </PageLayout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n      sort: { fields: [frontmatter___end], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            description\n            tags\n            start(formatString: \"MMMM YYYY\")\n\t\t\t\t\t\tend(formatString: \"MMMM YYYY\")\n\t\t\t\t\t\tseason\n\t\t\t\t\t\tyear\n\t\t\t\t\t\tindex\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n    allFile(\n      filter: {\n        relativePath: { regex: \"/feature/\" }\n        relativeDirectory: { regex: \"/content/projects/\" }\n      }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 400, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n          relativePath\n        }\n      }\n    }\n  }\n`\n","export default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0]\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit)\n            map[slug].push(image.node.childImageSharp.fluid)\n        } else {\n          const arr = []\n          arr.push(image.node.childImageSharp.fluid)\n          map[slug] = arr\n        }\n      } else {\n        map[slug] = image.node.childImageSharp.fluid\n      }\n      return map\n    }, {})\n  },\n\tgetCaptionMap: (captions, regex, hasMultipleImages = false, limit = 3) => {\n    return captions.reduce((map, caption) => {\n      const slug = caption.node.fileAbsolutePath.match(regex)[0]\n      map[slug] = caption.node.frontmatter.caption\n      return map\n    }, {})\n  },\n}\n"],"sourceRoot":""}