{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/templates/post-template.js","webpack:///./src/templates/projects-post.js"],"names":["getImageMap","images","regex","hasMultipleImages","limit","reduce","map","image","slug","node","relativePath","match","hasOwnProperty","length","push","childImageSharp","fluid","arr","getCaptionMap","captions","caption","fileAbsolutePath","frontmatter","title","excerpt","html","subTitle","description","className","dangerouslySetInnerHTML","__html","SubTitle","season","year","tags","linkTitles","actualLinks","tag","key","pill","variant","link","index","href","post","data","markdownRemark"],"mappings":"oOAAe,G,UAAA,CACbA,YAAa,SAACC,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAACC,EAAKC,GACzB,IAAMC,EAAOD,EAAME,KAAKC,aAAaC,MAAMT,GAAO,GAClD,GAAIC,EACF,GAAIG,EAAIM,eAAeJ,GACjBF,EAAIE,GAAMK,QAAUT,GACtBE,EAAIE,GAAMM,KAAKP,EAAME,KAAKM,gBAAgBC,WACvC,CACL,IAAMC,EAAM,GACZA,EAAIH,KAAKP,EAAME,KAAKM,gBAAgBC,OACpCV,EAAIE,GAAQS,OAGdX,EAAIE,GAAQD,EAAME,KAAKM,gBAAgBC,MAEzC,OAAOV,IACN,KAENY,cAAe,SAACC,EAAUjB,EAAOC,EAA2BC,GACzD,YADuE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GAC1De,EAASd,QAAO,SAACC,EAAKc,GAG3B,OADAd,EADac,EAAQX,KAAKY,iBAAiBV,MAAMT,GAAO,IAC5CkB,EAAQX,KAAKa,YAAYF,QAC9Bd,IACN,Q,kCCxBP,6DAMe,oBAAGiB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,KAAMC,EAAzB,EAAyBA,SAAzB,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKH,MAAOA,EAAOI,YAAaH,IAChC,kBAAC,IAAD,CAAWI,UAAU,cAAcZ,OAAK,GACtC,kBAAC,IAAD,CAAWO,MAAOA,IACjBG,EACD,kBAAC,IAAD,CAAWE,UAAU,gBACnB,yBAAKC,wBAAyB,CAAEC,OAAQL,U,kCCbhD,wDAOMM,GAPN,UAOiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,YAAnC,OAChB,wBAAIR,UAAU,mBACVI,EADJ,IACaC,EAEZ,yBAAKL,UAAU,QAAO,4BAClBM,EAAK5B,KAAI,SAAA+B,GAAG,OACX,kBAAC,IAAD,CAAOC,IAAKD,EAAKE,MAAI,EAACC,QAAQ,OAAOZ,UAAU,4BAC7C,wBAAIA,UAAU,mBAAmBS,QAIxC,yBAAKT,UAAU,QACXO,EAAW7B,KAAI,SAACmC,EAAMC,GAAP,OAClB,uBAAGC,KAAMP,EAAYM,GAAQd,UAAU,kBAAiB,kBAAC,IAAD,CAAOU,IAAKG,EAAMF,MAAI,EAACX,UAAU,wCACxF,wBAAIA,UAAU,4BAA4Ba,IAD3C,YASY,sBAAe,IACtBG,EADqB,EAAXC,KACEC,eAClB,OACE,kBAAC,IAAD,CACEvB,MAAOqB,EAAKtB,YAAYC,MACxBG,SACE,kBAACK,EAAD,CACHC,OAAQY,EAAKtB,YAAYU,OACzBC,KAAMW,EAAKtB,YAAYW,KACvBC,KAAMU,EAAKtB,YAAYY,KACvBE,YAAaQ,EAAKtB,YAAYc,YAC9BD,WAAYS,EAAKtB,YAAYa,aAG5BX,QAASoB,EAAKpB,QACdC,KAAMmB,EAAKnB","file":"component---src-templates-projects-post-js-12969db9973e6b22a611.js","sourcesContent":["export default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0]\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit)\n            map[slug].push(image.node.childImageSharp.fluid)\n        } else {\n          const arr = []\n          arr.push(image.node.childImageSharp.fluid)\n          map[slug] = arr\n        }\n      } else {\n        map[slug] = image.node.childImageSharp.fluid\n      }\n      return map\n    }, {})\n  },\n\tgetCaptionMap: (captions, regex, hasMultipleImages = false, limit = 3) => {\n    return captions.reduce((map, caption) => {\n      const slug = caption.node.fileAbsolutePath.match(regex)[0]\n      map[slug] = caption.node.frontmatter.caption\n      return map\n    }, {})\n  },\n}\n","import React from \"react\"\nimport Container from \"react-bootstrap/Container\"\nimport { PageLayout, PageTitle } from \"../components\"\n\nimport SEO from \"../utils/seo\"\n\nexport default ({ title, excerpt, html, subTitle }) => (\n  <PageLayout>\n    <SEO title={title} description={excerpt} />\n    <Container className=\"text-center\" fluid>\n      <PageTitle title={title} />\n      {subTitle}\n      <Container className=\"text-justify\">\n        <div dangerouslySetInnerHTML={{ __html: html }} />\n      </Container>\n    </Container>\n  </PageLayout>\n)\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PostTemplate from \"./post-template\"\nimport Badge from \"react-bootstrap/Badge\"\nimport Button from 'react-bootstrap/Button'\nimport { ThemeContext, SEO } from \"../utils\"\n\nconst SubTitle = ({ season, year, tags, linkTitles, actualLinks }) => (\n\t<h5 className=\"text-muted mb-5\">\n    {season} {year}\n\t\t\n\t\t<div className=\"mb-2\"><p></p>\n\t    {tags.map(tag => (\n\t      <Badge key={tag} pill variant=\"dark\" className=\"img-hover px-3 mb-1 mr-1\">\n\t        <h5 className=\"text-white my-0\">{tag}</h5>\n\t      </Badge>\n\t    ))}\n\t  </div>\n\t\t<div className=\"mb-5\">\n\t    {linkTitles.map((link, index) => (\n\t\t\t<a href={actualLinks[index]} className=\"no-decorations\"><Badge key={link} pill className=\"img-hover px-3 mb-1 mr-1 themed-pill\" >\n\t\t\t\t<h5 className=\"themed-text-swapped my-0\">{link}</h5></Badge> </a>\n\t    ))}\n\t  </div>\n\n  </h5>\n\t\n)\n\nexport default ({ data }) => {\n  const post = data.markdownRemark\n  return (\n    <PostTemplate\n      title={post.frontmatter.title}\n      subTitle={\n        <SubTitle\n\t\t\t\t\tseason={post.frontmatter.season}\n\t\t\t\t\tyear={post.frontmatter.year}\n\t\t\t\t\ttags={post.frontmatter.tags}\n\t\t\t\t\tactualLinks={post.frontmatter.actualLinks}\n\t\t\t\t\tlinkTitles={post.frontmatter.linkTitles}\n        />\n      }\n      excerpt={post.excerpt}\n      html={post.html}\n    />\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n\t\t\t\ttitle\n\t \t\t\tseason\n\t \t\t  year(formatString: \"YYYY\")\n\t \t\t\ttags\n\t\t\t\tlinkTitles\n\t\t\t\tactualLinks\n      }\n      excerpt\n      timeToRead\n    }\n  }\n`"],"sourceRoot":""}