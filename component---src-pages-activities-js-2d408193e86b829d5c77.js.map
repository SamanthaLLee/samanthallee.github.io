{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/pages/activities.js"],"names":["getImageMap","images","regex","hasMultipleImages","limit","reduce","map","image","slug","node","relativePath","match","hasOwnProperty","length","push","childImageSharp","fluid","arr","getCaptionMap","captions","caption","fileAbsolutePath","frontmatter","data","useState","filteredData","query","state","setState","allFeaturedImages","allFile","edges","allPosts","allMarkdownRemark","featuredImageMap","Utils","handleChange","param","e","target","value","filter","post","description","title","tags","stdQuery","toLowerCase","excerpt","includes","join","filteredPosts","className","type","placeholder","onChange","style","display","pill","variant","onClick","key","id","to","website","featuredImage","fields","startDate","start","endDate","end"],"mappings":"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","file":"component---src-pages-activities-js-2d408193e86b829d5c77.js","sourcesContent":["export default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0]\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit)\n            map[slug].push(image.node.childImageSharp.fluid)\n        } else {\n          const arr = []\n          arr.push(image.node.childImageSharp.fluid)\n          map[slug] = arr\n        }\n      } else {\n        map[slug] = image.node.childImageSharp.fluid\n      }\n      return map\n    }, {})\n  },\n\tgetCaptionMap: (captions, regex, hasMultipleImages = false, limit = 3) => {\n    return captions.reduce((map, caption) => {\n      const slug = caption.node.fileAbsolutePath.match(regex)[0]\n      map[slug] = caption.node.frontmatter.caption\n      return map\n    }, {})\n  },\n}\n","import React, { useState } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { PageLayout, PageTitle, ActivityLink } from \"../components\"\nimport { SEO, Utils } from \"../utils\"\nimport { Container, Form, FormControl, Badge } from \"react-bootstrap\"\n\nexport default ({ data }) => {\n  const [state, setState] = useState({\n    filteredData: [],\n    query: \"\",\n  })\n\n  const allFeaturedImages = data.allFile.edges || []\n  const allPosts = data.allMarkdownRemark.edges || []\n  const regex = /\\/[activities].*\\/|$/\n  const featuredImageMap = Utils.getImageMap(allFeaturedImages, regex)\n\n  function handleChange(param) {\n    return e => {\n      let query = \"\"\n      if (!param) {\n        query = e.target.value\n      } else {\n        query = param\n      }\n      const filteredData =\n        param === \"x\"\n          ? allPosts\n          : allPosts.filter(post => {\n              const { description, title, tags } = post.node.frontmatter\n              const stdQuery = query.toLowerCase()\n              return (\n                post.node.excerpt.toLowerCase().includes(stdQuery) ||\n                (description && description.toLowerCase().includes(stdQuery)) ||\n                title.toLowerCase().includes(stdQuery) ||\n                (tags && tags.join(\"\").toLowerCase().includes(stdQuery))\n              )\n            })\n\n      setState({\n        query,\n        filteredData,\n      })\n    }\n  }\n\n  const { filteredData, query } = state\n  const filteredPosts = query !== \"\" ? filteredData : allPosts\n\n  return (\n    <PageLayout>\n      <SEO title=\"Activities\" />\n      <PageTitle title=\"Activities\" />\n      <Container className=\"px-5 mb-5 text-center\">\n        <Form className=\"blog-filter\">\n          <FormControl\n            className=\"search\"\n            type=\"text\"\n            placeholder=\"search\"\n            onChange={handleChange}\n          />\n        </Form>\n      </Container>\n      <Container>\n        <p style={{ display: \"inline\" }}>quick search: &nbsp;</p>\n        <Badge\n          pill\n          variant=\"dark\"\n          className=\"img-hover px-3 mb-1 mr-1\"\n          onClick={handleChange(\"dei\")}\n        >\n          <h6 className=\"text-white my-0 prevent-select\">dei</h6>\n        </Badge>\n        <Badge\n          pill\n          variant=\"dark\"\n          className=\"img-hover px-3 mb-1 mr-1\"\n          onClick={handleChange(\"politics\")}\n        >\n          <h6 className=\"text-white my-0 prevent-select\">politics</h6>\n        </Badge>\n        <Badge\n          pill\n          variant=\"dark\"\n          className=\"img-hover px-3 mb-1 mr-1\"\n          onClick={handleChange(\"tech\")}\n        >\n          <h6 className=\"text-white my-0 prevent-select\">tech</h6>\n        </Badge>\n        <Badge\n          pill\n          variant=\"dark\"\n          className=\"img-hover px-3 mb-1 mr-1\"\n          onClick={handleChange(\"rutgers\")}\n        >\n          <h6 className=\"text-white my-0 prevent-select\">rutgers</h6>\n        </Badge>\n        <Badge\n          pill\n          className=\"img-hover px-2 mb-1 mr-1\"\n          onClick={handleChange(\"x\")}\n        >\n          <h6 className=\"text-white my-0 prevent-select\">‚ùå</h6>\n        </Badge>\n      </Container>\n      <Container\n        fluid\n        className=\"p-3 w-auto text-left d-flex flex-wrap justify-content-center\"\n      >\n        {filteredPosts.map(({ node }) => (\n          <div key={node.id} className=\"p-3\">\n            <ActivityLink\n              to={node.frontmatter.website}\n              featuredImage={featuredImageMap[node.fields.slug]}\n              title={node.frontmatter.title}\n              startDate={node.frontmatter.start}\n              endDate={node.frontmatter.end}\n              tags={node.frontmatter.tags}\n              excerpt={node.excerpt}\n              description={node.frontmatter.description}\n            />\n          </div>\n        ))}\n      </Container>\n    </PageLayout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/activities/\" } }\n      sort: { fields: [frontmatter___end, frontmatter___index], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            description\n            tags\n            start(formatString: \"MMMM YYYY\")\n            end(formatString: \"MMMM YYYY\")\n            index\n            website\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n    allFile(\n      filter: {\n        relativePath: { regex: \"/feature/\" }\n        relativeDirectory: { regex: \"/content/activities/\" }\n      }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 400, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n          relativePath\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}